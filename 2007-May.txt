From contact at petersalomonsen.com  Sun May  6 13:11:51 2007
From: contact at petersalomonsen.com (Peter Salomonsen)
Date: Sun, 06 May 2007 13:11:51 +0200
Subject: [jjack-users] JJack Javasound provider
In-Reply-To: <e78383b30704300349y3d5de10cld859300686bc082f@mail.gmail.com>
References: <e78383b30704300349y3d5de10cld859300686bc082f@mail.gmail.com>
Message-ID: <200705061311.52403.contact@petersalomonsen.com>

- Lines supports 8/16/24/32 bit big and little endian audio formats
- Input and output (Source and targetdataline)

Quick example of use 
(com.petersalomonsen.jjack.javasound.JJackMixerProviderTest):

// Scan mixers
		Info jackMixerInfo = null;
		
		//for(Info info : AudioSystem.getMixerInfo())
		Info[] infos = AudioSystem.getMixerInfo();
		for (int i = 0; i < infos.length; i++)
		{
			Info info = infos[i];
			if(info.getName().equals("JJack"))
				jackMixerInfo = info;
		}
		AudioFormat format = new 
AudioFormat(JJackSystem.getSampleRate(),16,2,true,false);
		
		Mixer mixer = AudioSystem.getMixer(jackMixerInfo);
		SourceDataLine lineOut = (SourceDataLine) 
mixer.getLine(mixer.getSourceLineInfo()[0]);
		lineOut.open(format,512);
		lineOut.start();
		TargetDataLine lineIn = (TargetDataLine) 
mixer.getLine(mixer.getTargetLineInfo()[0]);
		lineIn.open(format,512);
		lineIn.start();
		
		byte[] buf = new byte[128];
		while(true)
		{
			lineIn.read(buf,0,buf.length);
			lineOut.write(buf,0,buf.length);
		}



From helgeingvart at gmail.com  Tue May  8 22:36:15 2007
From: helgeingvart at gmail.com (Helge Fredriksen)
Date: Tue, 8 May 2007 22:36:15 +0200
Subject: [jjack-users] JJack Javasound provider
In-Reply-To: <200705061311.52403.contact@petersalomonsen.com>
References: <e78383b30704300349y3d5de10cld859300686bc082f@mail.gmail.com>
	<200705061311.52403.contact@petersalomonsen.com>
Message-ID: <e78383b30705081336s8c2c426r6d9315d4596ee982@mail.gmail.com>

Thanks again Peter! Guess it's just as easy to use it for outputting
sound? Helge

On 5/6/07, Peter Salomonsen <contact at petersalomonsen.com> wrote:
> - Lines supports 8/16/24/32 bit big and little endian audio formats
> - Input and output (Source and targetdataline)
>
> Quick example of use
> (com.petersalomonsen.jjack.javasound.JJackMixerProviderTest):
>
> // Scan mixers
> 		Info jackMixerInfo = null;
> 		
> 		//for(Info info : AudioSystem.getMixerInfo())
> 		Info[] infos = AudioSystem.getMixerInfo();
> 		for (int i = 0; i < infos.length; i++)
> 		{
> 			Info info = infos[i];
> 			if(info.getName().equals("JJack"))
> 				jackMixerInfo = info;
> 		}
> 		AudioFormat format = new
> AudioFormat(JJackSystem.getSampleRate(),16,2,true,false);
> 		
> 		Mixer mixer = AudioSystem.getMixer(jackMixerInfo);
> 		SourceDataLine lineOut = (SourceDataLine)
> mixer.getLine(mixer.getSourceLineInfo()[0]);
> 		lineOut.open(format,512);
> 		lineOut.start();
> 		TargetDataLine lineIn = (TargetDataLine)
> mixer.getLine(mixer.getTargetLineInfo()[0]);
> 		lineIn.open(format,512);
> 		lineIn.start();
> 		
> 		byte[] buf = new byte[128];
> 		while(true)
> 		{
> 			lineIn.read(buf,0,buf.length);
> 			lineOut.write(buf,0,buf.length);
> 		}
>
> _______________________________________________
> jjack-users mailing list
> jjack-users at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/jjack-users
>


From helgeingvart at gmail.com  Tue May  8 22:39:18 2007
From: helgeingvart at gmail.com (Helge Fredriksen)
Date: Tue, 8 May 2007 22:39:18 +0200
Subject: [jjack-users] JJack Javasound provider
In-Reply-To: <e78383b30705081336s8c2c426r6d9315d4596ee982@mail.gmail.com>
References: <e78383b30704300349y3d5de10cld859300686bc082f@mail.gmail.com>
	<200705061311.52403.contact@petersalomonsen.com>
	<e78383b30705081336s8c2c426r6d9315d4596ee982@mail.gmail.com>
Message-ID: <e78383b30705081339g508faf77id2f67de4733e98e5@mail.gmail.com>

Ah forget the last post. Studying the code once more gave the answer...

On 5/8/07, Helge Fredriksen <helgeingvart at gmail.com> wrote:
> Thanks again Peter! Guess it's just as easy to use it for outputting
> sound? Helge
>
> On 5/6/07, Peter Salomonsen <contact at petersalomonsen.com> wrote:
> > - Lines supports 8/16/24/32 bit big and little endian audio formats
> > - Input and output (Source and targetdataline)
> >
> > Quick example of use
> > (com.petersalomonsen.jjack.javasound.JJackMixerProviderTest):
> >
> > // Scan mixers
> > 		Info jackMixerInfo = null;
> > 		
> > 		//for(Info info : AudioSystem.getMixerInfo())
> > 		Info[] infos = AudioSystem.getMixerInfo();
> > 		for (int i = 0; i < infos.length; i++)
> > 		{
> > 			Info info = infos[i];
> > 			if(info.getName().equals("JJack"))
> > 				jackMixerInfo = info;
> > 		}
> > 		AudioFormat format = new
> > AudioFormat(JJackSystem.getSampleRate(),16,2,true,false);
> > 		
> > 		Mixer mixer = AudioSystem.getMixer(jackMixerInfo);
> > 		SourceDataLine lineOut = (SourceDataLine)
> > mixer.getLine(mixer.getSourceLineInfo()[0]);
> > 		lineOut.open(format,512);
> > 		lineOut.start();
> > 		TargetDataLine lineIn = (TargetDataLine)
> > mixer.getLine(mixer.getTargetLineInfo()[0]);
> > 		lineIn.open(format,512);
> > 		lineIn.start();
> > 		
> > 		byte[] buf = new byte[128];
> > 		while(true)
> > 		{
> > 			lineIn.read(buf,0,buf.length);
> > 			lineOut.write(buf,0,buf.length);
> > 		}
> >
> > _______________________________________________
> > jjack-users mailing list
> > jjack-users at lists.berlios.de
> > https://lists.berlios.de/mailman/listinfo/jjack-users
> >
>


From contact at petersalomonsen.com  Fri May 18 20:21:10 2007
From: contact at petersalomonsen.com (Peter Salomonsen)
Date: Fri, 18 May 2007 20:21:10 +0200
Subject: [jjack-users] DataLine.Info.getFormats() supported
In-Reply-To: <1fb5efbb0705150340p46dccfd3o4d1a95e789fb0655@mail.gmail.com>
References: <200705141544.50775.p.j.leonard@bath.ac.uk>
	<1fb5efbb0705150307g18a82faakf274a596f1a736ee@mail.gmail.com>
	<1fb5efbb0705150340p46dccfd3o4d1a95e789fb0655@mail.gmail.com>
Message-ID: <200705182021.10314.contact@petersalomonsen.com>

DataLine.Info.getFormats() is now supported:

 Mixer 0: JJack desc: JJack javasound provider vend: jjack.berlios.de ver: 0.1
 ---------------SOURCE -------------------------------- 
class com.petersalomonsen.jjack.javasound.SourceJJackLine supporting 16 audio 
formats, and buffers of at least 32 bytes | 
com.petersalomonsen.jjack.javasound.SourceJJackLine at 6eb02efa
PCM_SIGNED 44100.0 Hz, 8 bit, mono, 1 bytes/frame, 
PCM_SIGNED 44100.0 Hz, 16 bit, mono, 2 bytes/frame, little-endian
PCM_SIGNED 44100.0 Hz, 24 bit, mono, 3 bytes/frame, little-endian
PCM_SIGNED 44100.0 Hz, 32 bit, mono, 4 bytes/frame, little-endian
PCM_SIGNED 44100.0 Hz, 8 bit, mono, 1 bytes/frame, 
PCM_SIGNED 44100.0 Hz, 16 bit, mono, 2 bytes/frame, big-endian
PCM_SIGNED 44100.0 Hz, 24 bit, mono, 3 bytes/frame, big-endian
PCM_SIGNED 44100.0 Hz, 32 bit, mono, 4 bytes/frame, big-endian
PCM_SIGNED 44100.0 Hz, 8 bit, stereo, 2 bytes/frame, 
PCM_SIGNED 44100.0 Hz, 16 bit, stereo, 4 bytes/frame, little-endian
PCM_SIGNED 44100.0 Hz, 24 bit, stereo, 6 bytes/frame, little-endian
PCM_SIGNED 44100.0 Hz, 32 bit, stereo, 8 bytes/frame, little-endian
PCM_SIGNED 44100.0 Hz, 8 bit, stereo, 2 bytes/frame, 
PCM_SIGNED 44100.0 Hz, 16 bit, stereo, 4 bytes/frame, big-endian
PCM_SIGNED 44100.0 Hz, 24 bit, stereo, 6 bytes/frame, big-endian
PCM_SIGNED 44100.0 Hz, 32 bit, stereo, 8 bytes/frame, big-endian
 --------------- TARGET -------------------------------- 
class com.petersalomonsen.jjack.javasound.SourceJJackLine supporting 16 audio 
formats, and buffers of at least 32 bytes | 
com.petersalomonsen.jjack.javasound.SourceJJackLine at 79a5f739
PCM_SIGNED 44100.0 Hz, 8 bit, mono, 1 bytes/frame, 
PCM_SIGNED 44100.0 Hz, 16 bit, mono, 2 bytes/frame, little-endian
PCM_SIGNED 44100.0 Hz, 24 bit, mono, 3 bytes/frame, little-endian
PCM_SIGNED 44100.0 Hz, 32 bit, mono, 4 bytes/frame, little-endian
PCM_SIGNED 44100.0 Hz, 8 bit, mono, 1 bytes/frame, 
PCM_SIGNED 44100.0 Hz, 16 bit, mono, 2 bytes/frame, big-endian
PCM_SIGNED 44100.0 Hz, 24 bit, mono, 3 bytes/frame, big-endian
PCM_SIGNED 44100.0 Hz, 32 bit, mono, 4 bytes/frame, big-endian
PCM_SIGNED 44100.0 Hz, 8 bit, stereo, 2 bytes/frame, 
PCM_SIGNED 44100.0 Hz, 16 bit, stereo, 4 bytes/frame, little-endian
PCM_SIGNED 44100.0 Hz, 24 bit, stereo, 6 bytes/frame, little-endian
PCM_SIGNED 44100.0 Hz, 32 bit, stereo, 8 bytes/frame, little-endian
PCM_SIGNED 44100.0 Hz, 8 bit, stereo, 2 bytes/frame, 
PCM_SIGNED 44100.0 Hz, 16 bit, stereo, 4 bytes/frame, big-endian
PCM_SIGNED 44100.0 Hz, 24 bit, stereo, 6 bytes/frame, big-endian
PCM_SIGNED 44100.0 Hz, 32 bit, stereo, 8 bytes/frame, big-endian



From helgeingvart at gmail.com  Mon May 21 14:41:42 2007
From: helgeingvart at gmail.com (Helge Fredriksen)
Date: Mon, 21 May 2007 14:41:42 +0200
Subject: [jjack-users] Experience with volume setting?
Message-ID: <e78383b30705210541r6ccdb2c4g25e95c99bae3c701@mail.gmail.com>

Hello!

Do anyone have experience on how to change the volume on a signed PCM
encoded 2 byte sample? I've managed to reconstruct the short from two of the
nearby bytes. I think PCM is log10 encoded, probably has some linkage to
decibels, I guess... Lacking some theoretical background on sound digitizing
I guess, any good reference for bed time reading?

What I'm really after is the correct mix of several samples (S1...SN) into
one, where each sample is weighted (W1...WN).

Result = S1 * W1 + S2 * W2 + .... + SN * WN

and W1 + W2 + ... + WN = 1.

Helge F.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/jjack-users/attachments/20070521/01963568/attachment.html>

From contact at petersalomonsen.com  Mon May 21 19:09:24 2007
From: contact at petersalomonsen.com (Peter Salomonsen)
Date: Mon, 21 May 2007 19:09:24 +0200
Subject: [jjack-users] Experience with volume setting?
In-Reply-To: <e78383b30705210541r6ccdb2c4g25e95c99bae3c701@mail.gmail.com>
References: <e78383b30705210541r6ccdb2c4g25e95c99bae3c701@mail.gmail.com>
Message-ID: <200705211909.24781.contact@petersalomonsen.com>

On Monday 21 May 2007 14:41:42 Helge Fredriksen wrote:
> Hello!
>
> Do anyone have experience on how to change the volume on a signed PCM
> encoded 2 byte sample? I've managed to reconstruct the short from two of
> the nearby bytes. I think PCM is log10 encoded, probably has some linkage
> to decibels, I guess... Lacking some theoretical background on sound
> digitizing I guess, any good reference for bed time reading?

PCM is a simple direct linear digital representation of the analog signal. No 
logarithms involved. You only need logarithms if you want to change the 
volume using the decibel scale.

> What I'm really after is the correct mix of several samples (S1...SN) into
> one, where each sample is weighted (W1...WN).
>
> Result = S1 * W1 + S2 * W2 + .... + SN * WN
>
> and W1 + W2 + ... + WN = 1.

The correct mix is your formula just as you've entered it. Nothing more. Just 
make sure the sum of your weights is 1.

A fast decibel to multiplication factor converter:

public final class Decibel {
	static final float[] amplitudeRatio = new float[11000];
	static
	{
		for(float x=-100;x<10;x+=0.01)
			amplitudeRatio[(int)(x*100)+10000] = (float)Math.pow(10,x/20.0); 
	}
	
	public static final float getAmplitudeRatio(float dB)
	{
		return(amplitudeRatio[(int)(dB*100)+10000]);
	}
}
The decibel scale is precalculated, due to the Math.pow method which make take 
some extra time. To use this just:

sample = sample * getAmplitueRatio(-6);

which will lower the volume of your sample by 6dB.

regards,

Peter


From helgeingvart at gmail.com  Tue May 22 09:17:34 2007
From: helgeingvart at gmail.com (Helge Fredriksen)
Date: Tue, 22 May 2007 09:17:34 +0200
Subject: [jjack-users] Experience with volume setting?
In-Reply-To: <200705211909.24781.contact@petersalomonsen.com>
References: <e78383b30705210541r6ccdb2c4g25e95c99bae3c701@mail.gmail.com>
	<200705211909.24781.contact@petersalomonsen.com>
Message-ID: <e78383b30705220017s38c8fffdx8cc461e7f4268262@mail.gmail.com>

> PCM is a simple direct linear digital representation of the analog signal.
> No
> logarithms involved. You only need logarithms if you want to change the
> volume using the decibel scale.


OK, I  imagine that the decibel scale considerations enter the picture when
you start considering the human ear, am I right? To my experience, lowering
the amplitude to 10% of original strength did not sound that way. More so
when I lowered it to 1%. Then it sounded like 10%, which would match the
decibel reduction pretty good.

> What I'm really after is the correct mix of several samples (S1...SN) into
> > one, where each sample is weighted (W1...WN).
> >
> > Result = S1 * W1 + S2 * W2 + .... + SN * WN
> >
> > and W1 + W2 + ... + WN = 1.
>
> The correct mix is your formula just as you've entered it. Nothing more.
> Just
> make sure the sum of your weights is 1.


OK, will try.

A fast decibel to multiplication factor converter:
> sample = sample * getAmplitueRatio(-6);
>
> which will lower the volume of your sample by 6dB.


What would be the typical decibel range to use? [-10, 10]? Or could it be
any integer number?

Thanks,
Helge
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/jjack-users/attachments/20070522/0c436434/attachment.html>

From contact at petersalomonsen.com  Tue May 22 12:27:10 2007
From: contact at petersalomonsen.com (Peter Salomonsen)
Date: Tue, 22 May 2007 12:27:10 +0200
Subject: [jjack-users] Hi
In-Reply-To: <f94b16ce0705220013kebb7fc4se8d031bb929a3d8e@mail.gmail.com>
References: <f94b16ce0705220013kebb7fc4se8d031bb929a3d8e@mail.gmail.com>
Message-ID: <200705221227.10552.contact@petersalomonsen.com>

On Tuesday 22 May 2007 09:13:01 Serge Perinsky wrote:
> Right now I'm in the process of writing a small multitrack recording
> application and I would be really glad to help in developing open-sourced
> support for Linux audio backend (ALSA, JACK, PulseAudio).

Hi,

Just want to inform. The jjack project http://jjack.berlios.de now also 
implements jack support through javasound interfaces. It's not in a final 
release yet, but by building from cvs, you'll get a jar that will add a jack 
mixer to your javasound environment.

Regards,

Peter Salomonsen



From contact at petersalomonsen.com  Tue May 22 14:49:11 2007
From: contact at petersalomonsen.com (Peter Salomonsen)
Date: Tue, 22 May 2007 14:49:11 +0200
Subject: [jjack-users] Experience with volume setting?
In-Reply-To: <e78383b30705220017s38c8fffdx8cc461e7f4268262@mail.gmail.com>
References: <e78383b30705210541r6ccdb2c4g25e95c99bae3c701@mail.gmail.com>
	<200705211909.24781.contact@petersalomonsen.com>
	<e78383b30705220017s38c8fffdx8cc461e7f4268262@mail.gmail.com>
Message-ID: <200705221449.12059.contact@petersalomonsen.com>

On Tuesday 22 May 2007 09:17:34 Helge Fredriksen wrote:
> > PCM is a simple direct linear digital representation of the analog
> > signal. No
> > logarithms involved. You only need logarithms if you want to change the
> > volume using the decibel scale.
>
> OK, I  imagine that the decibel scale considerations enter the picture when
> you start considering the human ear, am I right?

correct.

>
> What would be the typical decibel range to use? [-10, 10]? Or could it be
> any integer number?

http://en.wikipedia.org/wiki/Decibel#6_dB_per_bit

regards,

Peter


